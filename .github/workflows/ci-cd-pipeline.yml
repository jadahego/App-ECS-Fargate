name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-west-2

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Cache Python dependencies
      id: cache-python
      uses: actions/cache@v3
      with:
        path: app/site-packages
        key: ${{ runner.os }}-5-build-${{ hashFiles('app/requirements.txt') }}
        restore-keys: ${{ runner.os }}-5-build-
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8    

    - name: create venv
      run: |
        python3 -m venv .venv
        source .venv/bin/activate
        
    - if: steps.cache-python.outputs.cache-hit != 'true'
      name: Install dependencies
      run: |
        source .venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r ./app/requirements.txt
        pip install pytest
        cp -r .venv/lib/python3.8/site-packages ./app/site-packages

    - name: Move dependencies
      run: |
        cp -r ./app/site-packages/* .venv/lib/python3.8/site-packages/
      

    - name: Run tests
      run: |
        cd tests
        source ../.venv/bin/activate
        python -m pytest
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}    

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      id: build-image
      run: |
        IMAGE_TAG=latest
        IMAGE_NAME=cb-app
        REPOSITORY_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com/$IMAGE_NAME

        docker build -t $IMAGE_NAME:$IMAGE_TAG .
        docker tag $IMAGE_NAME:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG
        docker push $REPOSITORY_URI:$IMAGE_TAG

    - name: Print image URI
      run: |
        echo "Image URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com/cb-app:latest"


  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Cache Python dependencies
      id: cache-python
      uses: actions/cache@v3
      with:
        path: app/site-packages
        key: ${{ runner.os }}-5-build-${{ hashFiles('app/requirements.txt') }}
        restore-keys: ${{ runner.os }}-5-build-

    - if: steps.cache-python.outputs.cache-hit != 'true'
      name: Install dependencies
      run: |
        python3 -m venv .venv
        source .venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r ./app/requirements.txt
        pip install pytest
        cp -r .venv/lib/python3.8/site-packages ./app/site-packages


    - name: Terraform Init
      run: terraform init
      working-directory: terraform/

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: terraform/

   